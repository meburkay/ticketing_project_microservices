#We add this dockor-compose service for the creating images of the services of our app and use it with docker not at intellij
version: '2.1'
services:
  database:
    restart: "no"
    image: postgres:latest
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "4432"
      POSTGRES_DB: "ticketing-app"
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  userservice:
    image: ${GROUP_ID}/user-service:${SERVICE_VERSION:-latest}
    environment:
      - "PROFILE=dev"
      - "JAVA_OPTS:-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "9090:9090"
    networks:
      - backend
  projectservice:
    image: ${GROUP_ID}/project-service:${SERVICE_VERSION:-latest}
    environment:
      - "PROFILE=dev"
      - "JAVA_OPTS:-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "9091:9091"
    networks:
      - backend
  taskservice:
    image: ${GROUP_ID}/task-service:${SERVICE_VERSION:-latest}
    environment:
      - "PROFILE=dev"
      - "JAVA_OPTS:-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - backend
#We add discovery service to docker compose for the image and docker use purpose.
  discovery-service:
    image: ${GROUP_ID}/discovery-service:${SERVICE_VERSION:-latest}
    ports:
      - "8761:8761"
    networks:
      - backend

  gateway-service:
    image: ${GROUP_ID}/gateway-service:${SERVICE_VERSION:-latest}
    ports:
      - "8762:8762"
    depends_on:
      - discovery-service
      - userservice
      - projectservice
      - taskservice
    networks:
      - backend
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - backend
#We put these two for creating images from them. Actually grafana is a tool. It doesn't have dependency. We create an image of it and use at as a tool. Here we arrange the configurations for the image of it.
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9093:9093"
#Here at the volumes part we define an yml file and its address. We create that yml file there and use it. In that file we define the endpoints for prometheus to gather the necessary information.
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    container_name: prometheus
    networks:
      - backend
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=abc1
    depends_on:
      - prometheus
    networks:
      - backend

networks:
  backend:
    driver: bridge
